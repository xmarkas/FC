{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\Qumoc\\\\food-commune\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\Qumoc\\\\food-commune\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */import store from'../store/js/index';import{setSession}from'../store/actions/index';console.log(\"running auth client..\");//  Okta browser SDK AuthClient\nvar config={issuer:\"https://dev-236245.okta.com/oauth2/default\",clientId:\"0oa4lqivbsKPbAtfs4x6\",redirectUri:\"https://qumoc.com/foodcommune\",responseMode:\"fragment\",tokenManager:{storage:\"sessionStorage\"},onSessionExpired:function onSessionExpired(){console.log(\"re-authorization is required\");// authClient.getWithRedirect();\n}};// AUTH CLIENT\nvar authClient=new window.OktaAuth(config);export var session=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var sessionExists;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return authClient.session.exists();case 2:sessionExists=_context.sent;console.log(sessionExists);return _context.abrupt(\"return\",sessionExists);case 5:case\"end\":return _context.stop();}}},_callee);}));return function session(){return _ref.apply(this,arguments);};}();export var getToken=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(session){var user,options,_options;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"GETTOKEN\");// Check for user session\nif(!session){_context2.next=9;break;}_context2.next=4;return authClient.session.get();case 4:user=_context2.sent;// Request token for API access\noptions={method:\"POST\",mode:\"same-origin\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({entity:{login:user.login,request:\"test\"}})};fetch(\"/foodcommune/secure\",options).then(function(res){if(res)return res.json();}).then(function(res){if(res.success){setSession({token:res.token,user:res.user});}}).catch(function(err){console.log(err);});_context2.next=11;break;case 9:// Get provisional site access\n_options={method:\"POST\",mode:\"same-origin\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({})};fetch(\"/foodcommune/secure/provisional\",_options).then(function(res){return res.json();}).then(function(res){store.dispatch(setSession({provisional:res.token}));}).catch(function(err){console.log(err);store.dispatch(setSession({provisional:\"test token\"}));});case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function getToken(_x){return _ref2.apply(this,arguments);};}();export var signInAuthenticate=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(email,password){var transaction;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return authClient.signIn({username:email,password:password}).catch(function(err){// this.setState({ errMsg: \"Email or password is incorrect!\" });\nconsole.log(err);});case 2:transaction=_context3.sent;if(transaction&&transaction.status===\"SUCCESS\"){console.log(\"SUCCESS\",transaction);authClient.session.setCookieAndRedirect(transaction.sessionToken,\"https://qumoc.com/foodcommune/mydashboard.html\");// Sets a cookie on redirect\n}case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function signInAuthenticate(_x2,_x3){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/util/okta.js"],"names":["store","setSession","console","log","config","issuer","clientId","redirectUri","responseMode","tokenManager","storage","onSessionExpired","authClient","window","OktaAuth","session","exists","sessionExists","getToken","get","user","options","method","mode","credentials","headers","body","JSON","stringify","entity","login","request","fetch","then","res","json","success","token","catch","err","dispatch","provisional","signInAuthenticate","email","password","signIn","username","transaction","status","setCookieAndRedirect","sessionToken"],"mappings":"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","sourcesContent":["/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\r\nimport store from '../store/js/index';\r\nimport { setSession } from '../store/actions/index';\r\n\r\n\r\nconsole.log(\"running auth client..\");\r\n//  Okta browser SDK AuthClient\r\nvar config = {\r\n    issuer: \"https://dev-236245.okta.com/oauth2/default\",\r\n    clientId: \"0oa4lqivbsKPbAtfs4x6\",\r\n    redirectUri: \"https://qumoc.com/foodcommune\",\r\n    responseMode: \"fragment\",\r\n    tokenManager: {\r\n        storage: \"sessionStorage\"\r\n    },\r\n    onSessionExpired: function () {\r\n        console.log(\"re-authorization is required\");\r\n        // authClient.getWithRedirect();\r\n    }\r\n};\r\n\r\n// AUTH CLIENT\r\nlet authClient = new window.OktaAuth(config);\r\n\r\nexport const session = async () => {\r\n    // let authClient = this.state.authClient;\r\n    let sessionExists = await authClient.session.exists()\r\n    console.log(sessionExists)\r\n    return sessionExists;\r\n}\r\n\r\nexport const getToken = async (session) => {\r\n    console.log(\"GETTOKEN\")\r\n    // Check for user session\r\n    if (session) {\r\n        let user = await authClient.session.get();\r\n\r\n        // Request token for API access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ entity: { login: user.login, request: \"test\" } })\r\n        };\r\n\r\n        fetch(\"/foodcommune/secure\", options)\r\n            .then(res => {\r\n                if (res) return res.json();\r\n            })\r\n            .then(res => {\r\n                if (res.success) {\r\n                    setSession({ token: res.token, user: res.user });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    } else {\r\n\r\n        // Get provisional site access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({})\r\n        };\r\n        fetch(\"/foodcommune/secure/provisional\", options)\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(res => {\r\n                store.dispatch( setSession({ provisional: res.token }));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                store.dispatch( setSession({ provisional: \"test token\" }));\r\n            })\r\n    }\r\n};\r\n\r\nexport const signInAuthenticate = async (email, password) => {\r\n    let transaction = await authClient\r\n      .signIn({\r\n        username: email,\r\n        password: password\r\n      })\r\n      .catch(err => {\r\n        // this.setState({ errMsg: \"Email or password is incorrect!\" });\r\n        console.log(err);\r\n      });\r\n\r\n    if (transaction && transaction.status === \"SUCCESS\") {\r\n      console.log(\"SUCCESS\", transaction);\r\n      authClient.session.setCookieAndRedirect(\r\n        transaction.sessionToken,\r\n        \"https://qumoc.com/foodcommune/mydashboard.html\"\r\n      ); // Sets a cookie on redirect\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}