{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\Qumoc\\\\food-commune\\\\src\\\\components\\\\GroupsView.jsx\";\nimport React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport GroupList from \"./GroupList\";\nimport CreateGroup from \"./CreateGroup\";\n\nclass GroupsView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchInput: \"\",\n      showAddGroup: false\n    };\n\n    this.onSearch = ev => {\n      let value = ev.target.value;\n      this.setState({\n        searchInput: value\n      });\n    };\n\n    this.addGroup = toggle => {\n      this.setState({\n        showAddGroup: this.state.showAddGroup ? false : true\n      });\n    };\n\n    this.newGroup = payload => {\n      payload.user_id = this.state.user.id;\n      insertGroup(this.state.token, payload).then(resolved => {\n        console.log(resolved); // this.setState((prevState) => {\n        //     let Deals = [...prevState.data.Deals];\n        //     let deal = Deals.findIndex(obj => { return obj.id === payload.id });\n        //     Deals[deal] = payload;\n        //     let data = { ...prevState.data, Deals: Deals }\n        //     return { data: data };\n        // }, () => {\n        //         this.setState({ showAddDeal: false });\n        // })\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  componentDidMount() {\n    let params = new URLSearchParams(window.location.search);\n    let option = params.get(\"option\");\n    if (option) this.setState({\n      showAddGroup: true\n    });\n  }\n\n  componentWillMount() {\n    fetchData(this.state.token, this.state.user.id).then(resolved => {\n      console.log(resolved);\n      this.setState({\n        data: resolved\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"nav-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        backgroundColor: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, this.state.showAddGroup && /*#__PURE__*/React.createElement(CreateGroup, {\n      newGroup: this.newGroup,\n      addGroup: this.addGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"group-view\",\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, {\n      onSearch: this.onSearch,\n      placeHolderVal: \"Search for group or area...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(GroupList, {\n      searchValue: this.state.searchInput,\n      data: this.state.data,\n      addGroup: this.addGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default GroupsView;\n\nfunction fetchData(token, userid) {\n  console.log(\"fetching data......\", token, userid);\n  return new Promise((resolve, reject) => {\n    let request = {\n      userId: userid\n    };\n    let options = {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify({\n        entity: request\n      })\n    };\n    fetch(\"/foodcommune/accounts/groups\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      if (!res.success) {\n        // Return to account detail and display error message\n        resolve(res);\n      } else {\n        reject(\"Unable to retrieve data\");\n      }\n    });\n  });\n}\n\nfunction insertGroup(token, payload) {\n  console.log(\"fetching data......\");\n  return new Promise((resolve, reject) => {\n    let options = {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify({\n        entity: payload\n      })\n    };\n    fetch(\"/foodcommune/accounts/createGroup\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      console.log(res);\n\n      if (res.success) {\n        // Return to account detail and display error message\n        resolve(res);\n      } else {\n        reject(\"Unable to retrieve data\");\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/components/GroupsView.jsx"],"names":["React","Component","SearchBar","GroupList","CreateGroup","GroupsView","state","searchInput","showAddGroup","onSearch","ev","value","target","setState","addGroup","toggle","newGroup","payload","user_id","user","id","insertGroup","token","then","resolved","console","log","catch","err","componentDidMount","params","URLSearchParams","window","location","search","option","get","componentWillMount","fetchData","data","render","backgroundColor","userid","Promise","resolve","reject","request","userId","options","method","headers","Headers","Authorization","body","JSON","stringify","entity","fetch","res","json","success"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport GroupList from \"./GroupList\";\r\nimport CreateGroup from \"./CreateGroup\";\r\n\r\nclass GroupsView extends Component {\r\n  state = {\r\n    searchInput: \"\",\r\n    showAddGroup: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let option = params.get(\"option\");\r\n\r\n    if (option) this.setState({ showAddGroup: true });\r\n  }\r\n\r\n  componentWillMount() {\r\n    fetchData(this.state.token, this.state.user.id)\r\n      .then(resolved => {\r\n        console.log(resolved);\r\n        this.setState({ data: resolved });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  onSearch = ev => {\r\n    let value = ev.target.value;\r\n\r\n    this.setState({ searchInput: value });\r\n  };\r\n\r\n  addGroup = toggle => {\r\n    this.setState({ showAddGroup: this.state.showAddGroup ? false : true });\r\n  };\r\n\r\n  newGroup = payload => {\r\n    payload.user_id = this.state.user.id;\r\n\r\n    insertGroup(this.state.token, payload)\r\n      .then(resolved => {\r\n        console.log(resolved);\r\n        // this.setState((prevState) => {\r\n        //     let Deals = [...prevState.data.Deals];\r\n        //     let deal = Deals.findIndex(obj => { return obj.id === payload.id });\r\n        //     Deals[deal] = payload;\r\n\r\n        //     let data = { ...prevState.data, Deals: Deals }\r\n        //     return { data: data };\r\n        // }, () => {\r\n        //         this.setState({ showAddDeal: false });\r\n        // })\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <!-- Navigation --> */}\r\n        <div id=\"nav-view\">\r\n          {/* <NavView\r\n              setToken={this.setToken}\r\n              setUser={this.setUser}\r\n              viewData={this.viewData}\r\n            /> */}\r\n        </div>\r\n\r\n        {/* <!-- Main Content --> */}\r\n        <div className=\"row\" style={{ backgroundColor: \"white\" }}>\r\n          {this.state.showAddGroup && (\r\n            <CreateGroup newGroup={this.newGroup} addGroup={this.addGroup} />\r\n          )}\r\n          <div id=\"group-view\" className=\"col-12\">\r\n            <SearchBar\r\n              onSearch={this.onSearch}\r\n              placeHolderVal={\"Search for group or area...\"}\r\n            />\r\n            <GroupList\r\n              searchValue={this.state.searchInput}\r\n              data={this.state.data}\r\n              addGroup={this.addGroup}\r\n            />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupsView;\r\n\r\nfunction fetchData(token, userid) {\r\n  console.log(\"fetching data......\", token, userid);\r\n  return new Promise((resolve, reject) => {\r\n    let request = { userId: userid };\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify({\r\n        entity: request\r\n      })\r\n    };\r\n    fetch(\"/foodcommune/accounts/groups\", options)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(res => {\r\n        if (!res.success) {\r\n          // Return to account detail and display error message\r\n          resolve(res);\r\n        } else {\r\n          reject(\"Unable to retrieve data\");\r\n        }\r\n      });\r\n  });\r\n}\r\n\r\nfunction insertGroup(token, payload) {\r\n  console.log(\"fetching data......\");\r\n  return new Promise((resolve, reject) => {\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify({\r\n        entity: payload\r\n      })\r\n    };\r\n    fetch(\"/foodcommune/accounts/createGroup\", options)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.success) {\r\n          // Return to account detail and display error message\r\n          resolve(res);\r\n        } else {\r\n          reject(\"Unable to retrieve data\");\r\n        }\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}