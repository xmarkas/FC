{"ast":null,"code":"/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\nimport store from '../store/js/index';\nimport { setSession } from '../store/actions/index';\nimport OktaAuth from '@okta/okta-auth-js';\nconsole.log(\"running auth client..\"); //  Okta browser SDK AuthClient\n\nvar config = {\n  issuer: \"https://dev-236245.okta.com/oauth2/default\",\n  clientId: \"0oa4lqivbsKPbAtfs4x6\",\n  redirectUri: \"https://qumoc.com/foodcommune\",\n  responseMode: \"fragment\",\n  tokenManager: {\n    storage: \"sessionStorage\"\n  },\n  onSessionExpired: function () {\n    console.log(\"re-authorization is required\"); // authClient.getWithRedirect();\n  }\n}; // AUTH CLIENT\n\nlet authClient = new OktaAuth(config);\nexport const session = async () => {\n  // let authClient = this.state.authClient;\n  let sessionExists = await authClient.session.exists();\n  console.log(sessionExists);\n  return sessionExists;\n};\nexport const getToken = async session => {\n  console.log(\"GETTOKEN\"); // Check for user session\n\n  if (session) {\n    // Request token for API access\n    let options = {\n      method: \"POST\",\n      mode: \"same-origin\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        entity: {\n          login: session.user.profile.login,\n          request: \"test\"\n        }\n      })\n    };\n    fetch(\"/foodcommune/secure\", options).then(res => {\n      if (res) return res.json();\n    }).then(res => {\n      if (res.success) {\n        store.dispatch(setSession({\n          token: res.token,\n          user: res.user\n        }));\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  } else {\n    // Get provisional site access\n    let options = {\n      method: \"POST\",\n      mode: \"same-origin\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({})\n    };\n    fetch(\"/foodcommune/secure/provisional\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      store.dispatch(setSession({\n        provisional: res.token\n      }));\n    }).catch(err => {\n      console.log(err);\n      store.dispatch(setSession({\n        provisional: \"test token\"\n      }));\n    });\n  }\n};\nexport const signInAuthenticate = async (email, password) => {\n  let transaction = await authClient.signIn({\n    username: email,\n    password: password\n  }).catch(err => {\n    // this.setState({ errMsg: \"Email or password is incorrect!\" });\n    console.log(err);\n  }).then(res => {\n    console.log(res);\n\n    if (res.status === 'SUCCESS') {\n      getToken(res);\n    }\n  }); // if (transaction && transaction.status === \"SUCCESS\") {\n  //   console.log(\"SUCCESS\", transaction);\n  //   authClient.session.setCookieAndRedirect(\n  //     transaction.sessionToken,\n  //     \"/foodcommune/dashboard\"\n  //   ); // Sets a cookie on redirect\n  // }\n};","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/util/okta.js"],"names":["store","setSession","OktaAuth","console","log","config","issuer","clientId","redirectUri","responseMode","tokenManager","storage","onSessionExpired","authClient","session","sessionExists","exists","getToken","options","method","mode","credentials","headers","body","JSON","stringify","entity","login","user","profile","request","fetch","then","res","json","success","dispatch","token","catch","err","provisional","signInAuthenticate","email","password","transaction","signIn","username","status"],"mappings":"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","sourcesContent":["/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\r\nimport store from '../store/js/index';\r\nimport { setSession } from '../store/actions/index';\r\nimport OktaAuth from '@okta/okta-auth-js';\r\n\r\n\r\n\r\n\r\nconsole.log(\"running auth client..\");\r\n//  Okta browser SDK AuthClient\r\nvar config = {\r\n    issuer: \"https://dev-236245.okta.com/oauth2/default\",\r\n    clientId: \"0oa4lqivbsKPbAtfs4x6\",\r\n    redirectUri: \"https://qumoc.com/foodcommune\",\r\n    responseMode: \"fragment\",\r\n    tokenManager: {\r\n        storage: \"sessionStorage\"\r\n    },\r\n    onSessionExpired: function () {\r\n        console.log(\"re-authorization is required\");\r\n        // authClient.getWithRedirect();\r\n    }\r\n};\r\n\r\n// AUTH CLIENT\r\nlet authClient = new OktaAuth(config);\r\n\r\n\r\nexport const session = async () => {\r\n    // let authClient = this.state.authClient;\r\n    let sessionExists = await authClient.session.exists();\r\n    \r\n    console.log(sessionExists)\r\n    return sessionExists;\r\n}\r\n\r\nexport const getToken = async (session) => {\r\n    console.log(\"GETTOKEN\")\r\n    // Check for user session\r\n    if (session) {\r\n\r\n        // Request token for API access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ entity: { login: session.user.profile.login, request: \"test\" } })\r\n        };\r\n\r\n        fetch(\"/foodcommune/secure\", options)\r\n            .then(res => {\r\n                if (res) return res.json();\r\n            })\r\n            .then(res => {\r\n                if (res.success) {\r\n                    store.dispatch(setSession({ token: res.token, user: res.user }));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    } else {\r\n\r\n        // Get provisional site access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({})\r\n        };\r\n        fetch(\"/foodcommune/secure/provisional\", options)\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(res => {\r\n                store.dispatch( setSession({ provisional: res.token }));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                store.dispatch( setSession({ provisional: \"test token\" }));\r\n            })\r\n    }\r\n};\r\n\r\nexport const signInAuthenticate = async (email, password) => {\r\n    let transaction = await authClient\r\n      .signIn({\r\n        username: email,\r\n        password: password\r\n      })\r\n      .catch(err => {\r\n        // this.setState({ errMsg: \"Email or password is incorrect!\" });\r\n        console.log(err);\r\n      })\r\n        .then(res => {\r\n            console.log(res);\r\n            if (res.status === 'SUCCESS') {\r\n                getToken(res);\r\n            }\r\n    })\r\n\r\n    // if (transaction && transaction.status === \"SUCCESS\") {\r\n    //   console.log(\"SUCCESS\", transaction);\r\n    //   authClient.session.setCookieAndRedirect(\r\n    //     transaction.sessionToken,\r\n    //     \"/foodcommune/dashboard\"\r\n    //   ); // Sets a cookie on redirect\r\n    // }\r\n}"]},"metadata":{},"sourceType":"module"}