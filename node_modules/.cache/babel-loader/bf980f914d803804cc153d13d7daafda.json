{"ast":null,"code":"/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\nimport store from '../store/js/index';\nimport { setSession, expiringSession, expireRedirect, cancelSession } from '../store/actions/index'; // import OktaAuth from '@okta/okta-auth-js';\n\nlet OktaAuth = require('@okta/okta-auth-js');\n\nconsole.log(\"running auth client..\"); //  Okta browser SDK AuthClient\n\nvar config = {\n  issuer: \"https://dev-236245.okta.com/oauth2/default\",\n  clientId: \"0oa4lqivbsKPbAtfs4x6\",\n  redirectUri: \"https://qumoc.com/foodcommune\",\n  responseMode: \"fragment\",\n  tokenManager: {\n    storage: \"sessionStorage\"\n  } // onSessionExpired: function () {\n  //     console.log(\"re-authorization is required\");\n  //     // authClient.getWithRedirect();\n  // }\n\n}; // AUTH CLIENT\n\nlet authClient = new OktaAuth(config);\nexport const session = async () => {\n  let options = {\n    method: \"POST\",\n    mode: \"same-origin\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  fetch(\"/foodcommune/site/usersession\", options).then(res => {\n    if (res) return res.json();\n  }).then(res => {\n    if (res.success) {\n      tokenExpHandler(res.tokenExpiresAt);\n      store.dispatch(setSession({\n        token: res.token,\n        user: res.user,\n        tokenExpiresAt: res.tokenExpiresAt\n      }));\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getToken = async session => {\n  console.log(\"GETTOKEN\"); // Check for user session\n\n  if (session) {\n    // Request token for API access\n    let options = {\n      method: \"POST\",\n      mode: \"same-origin\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        entity: {\n          login: session.user.profile.login,\n          request: \"test\"\n        }\n      })\n    };\n    fetch(\"/foodcommune/secure\", options).then(res => {\n      if (res) return res.json();\n    }).then(res => {\n      if (res.success) {\n        tokenExpHandler(res.tokenExpiresAt);\n        store.dispatch(setSession({\n          token: res.token,\n          user: res.user\n        }));\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  } else {\n    // Get provisional site access\n    let options = {\n      method: \"POST\",\n      mode: \"same-origin\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({})\n    };\n    fetch(\"/foodcommune/secure/provisional\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      store.dispatch(setSession({\n        provisional: res.token\n      }));\n    }).catch(err => {\n      console.log(err);\n      store.dispatch(setSession({\n        provisional: \"test token\"\n      }));\n    });\n  }\n};\nexport const signInAuthenticate = async (email, password) => {\n  return await authClient.signIn({\n    username: email,\n    password: password\n  }).catch(err => {\n    // this.setState({ errMsg: \"Email or password is incorrect!\" });\n    console.log(err);\n    return false;\n  }).then(res => {\n    console.log(res);\n\n    if (res.status === 'SUCCESS') {\n      getToken(res);\n      return true;\n    } else {\n      return false;\n    }\n  });\n};\nexport const signOut = () => {\n  // authClient.signOut();\n  store.dispatch(cancelSession());\n};\n\nfunction tokenExpHandler(tokenExpiresAt) {\n  let currentTime = new Date().getTime() / 1000;\n  let expireMin = tokenExpiresAt - currentTime; // Time token expires\n  // Set warning timeout - convert to millisecods\n\n  let expWarning = setTimeout(() => {\n    store.dispatch(expiringSession(true));\n  }, (expireMin - 60) * 1000); // Set timeout for redirect if user doesn't choose to stay signed in\n\n  let logOut = setTimeout(() => {\n    window.location.href = \"https://qumoc.com/foodcommune\";\n  }, expireMin * 1000); // Send handler for redirect to store - cancels if user continues session\n\n  store.dispatch(expireRedirect(logOut));\n}","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/util/okta.js"],"names":["store","setSession","expiringSession","expireRedirect","cancelSession","OktaAuth","require","console","log","config","issuer","clientId","redirectUri","responseMode","tokenManager","storage","authClient","session","options","method","mode","credentials","headers","fetch","then","res","json","success","tokenExpHandler","tokenExpiresAt","dispatch","token","user","catch","err","getToken","body","JSON","stringify","entity","login","profile","request","provisional","signInAuthenticate","email","password","signIn","username","status","signOut","currentTime","Date","getTime","expireMin","expWarning","setTimeout","logOut","window","location","href"],"mappings":"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","sourcesContent":["/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\r\nimport store from '../store/js/index';\r\nimport { setSession, expiringSession, expireRedirect, cancelSession } from '../store/actions/index';\r\n// import OktaAuth from '@okta/okta-auth-js';\r\nlet OktaAuth = require('@okta/okta-auth-js');\r\n\r\n\r\n\r\nconsole.log(\"running auth client..\");\r\n//  Okta browser SDK AuthClient\r\nvar config = {\r\n    issuer: \"https://dev-236245.okta.com/oauth2/default\",\r\n    clientId: \"0oa4lqivbsKPbAtfs4x6\",\r\n    redirectUri: \"https://qumoc.com/foodcommune\",\r\n    responseMode: \"fragment\",\r\n    tokenManager: {\r\n        storage: \"sessionStorage\"\r\n    },\r\n    // onSessionExpired: function () {\r\n    //     console.log(\"re-authorization is required\");\r\n    //     // authClient.getWithRedirect();\r\n    // }\r\n};\r\n\r\n// AUTH CLIENT\r\nlet authClient = new OktaAuth(config);\r\n\r\n\r\nexport const session = async () => {\r\n    let options = {\r\n        method: \"POST\",\r\n        mode: \"same-origin\",\r\n        credentials: \"same-origin\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    fetch(\"/foodcommune/site/usersession\", options)\r\n        .then(res => {\r\n            if (res) return res.json();\r\n        })\r\n        .then(res => {\r\n            if (res.success) {\r\n                tokenExpHandler(res.tokenExpiresAt);\r\n                store.dispatch(setSession({ token: res.token, user: res.user, tokenExpiresAt: res.tokenExpiresAt }));\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const getToken = async (session) => {\r\n    console.log(\"GETTOKEN\")\r\n    // Check for user session\r\n    if (session) {\r\n\r\n        // Request token for API access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ entity: { login: session.user.profile.login, request: \"test\" } })\r\n        };\r\n\r\n        fetch(\"/foodcommune/secure\", options)\r\n            .then(res => {\r\n                if (res) return res.json();\r\n            })\r\n            .then(res => {\r\n                if (res.success) {\r\n                    tokenExpHandler(res.tokenExpiresAt);\r\n                    store.dispatch(setSession({ token: res.token, user: res.user }));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    } else {\r\n\r\n        // Get provisional site access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({})\r\n        };\r\n        fetch(\"/foodcommune/secure/provisional\", options)\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(res => {\r\n                store.dispatch(setSession({ provisional: res.token }));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                store.dispatch(setSession({ provisional: \"test token\" }));\r\n            })\r\n    }\r\n};\r\n\r\nexport const signInAuthenticate = async (email, password) => {\r\n    return await authClient\r\n        .signIn({\r\n            username: email,\r\n            password: password\r\n        })\r\n        .catch(err => {\r\n            // this.setState({ errMsg: \"Email or password is incorrect!\" });\r\n            console.log(err);\r\n            return false;\r\n        })\r\n        .then(res => {\r\n            console.log(res);\r\n            if (res.status === 'SUCCESS') {\r\n                getToken(res);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        })\r\n}\r\n\r\nexport const signOut = () => {\r\n    // authClient.signOut();\r\n    store.dispatch(cancelSession());\r\n}\r\n\r\nfunction tokenExpHandler(tokenExpiresAt) {\r\n    let currentTime = new Date().getTime() / 1000;\r\n    let expireMin = (tokenExpiresAt - currentTime); // Time token expires\r\n\r\n    // Set warning timeout - convert to millisecods\r\n    let expWarning = setTimeout(() => {\r\n        store.dispatch(expiringSession(true));\r\n    }, (expireMin - 60) * 1000);\r\n\r\n    // Set timeout for redirect if user doesn't choose to stay signed in\r\n    let logOut = setTimeout(() => {\r\n        window.location.href = \"https://qumoc.com/foodcommune\";\r\n    }, expireMin * 1000);\r\n\r\n    // Send handler for redirect to store - cancels if user continues session\r\n    store.dispatch(expireRedirect(logOut));\r\n}"]},"metadata":{},"sourceType":"module"}