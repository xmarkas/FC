{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\FC-SERVER\\\\food-commune\\\\src\\\\components\\\\GroupsView.jsx\";\nimport React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport GroupList from \"./GroupList\";\nimport CreateGroup from \"./CreateGroup\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nconst mapStateToProps = state => {\n  return {\n    provisional: state.provisional,\n    user: state.user,\n    token: state.token\n  };\n};\n\nclass GroupsView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchInput: \"\",\n      showAddGroup: false\n    };\n\n    this.onSearch = ev => {\n      let value = ev.target.value;\n      this.setState({\n        searchInput: value\n      });\n    };\n\n    this.addGroup = toggle => {\n      this.setState({\n        showAddGroup: this.state.showAddGroup ? false : true\n      });\n    };\n\n    this.newGroup = payload => {\n      payload.user_id = this.props.user.id;\n      insertGroup(this.props.token, payload).then(resolved => {\n        console.log(resolved);\n        this.setState({\n          showAddGroup: false\n        });\n        this.setState(prevState => {\n          let Clans = [...prevState.data.Clans];\n          payload.admin_id = this.props.user.id;\n          Clans.push(payload);\n          let data = { ...prevState.data,\n            Clans: Clans\n          };\n          return {\n            data: data\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Value passed from Router > Link\n    if (this.props.history.location.query) {\n      let option = this.props.history.location.query.option; // If the option flag exist and is true open add group window\n\n      if (option) this.setState({\n        showAddGroup: true\n      });\n    }\n  }\n\n  componentWillMount() {\n    fetchData(this.props.token, this.props.user.id).then(resolved => {\n      console.log(resolved);\n      this.setState({\n        data: resolved\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        backgroundColor: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, this.state.showAddGroup && /*#__PURE__*/React.createElement(CreateGroup, {\n      newGroup: this.newGroup,\n      addGroup: this.addGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"group-view\",\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, {\n      onSearch: this.onSearch,\n      placeHolderVal: \"Search for group or area...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(GroupList, {\n      searchValue: this.state.searchInput,\n      data: this.state.data,\n      addGroup: this.addGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(GroupsView));\n\nfunction fetchData(token, userid) {\n  console.log(\"fetching data......\", token, userid);\n  return new Promise((resolve, reject) => {\n    let request = {\n      userId: userid\n    };\n    let options = {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify({\n        entity: request\n      })\n    };\n    fetch(\"/accounts/groups\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      if (!res.success) {\n        // Return to account detail and display error message\n        resolve(res);\n      } else {\n        reject(\"Unable to retrieve data\");\n      }\n    });\n  });\n}\n\nfunction insertGroup(token, payload) {\n  console.log(\"fetching data......\");\n  return new Promise((resolve, reject) => {\n    let options = {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify({\n        entity: payload\n      })\n    };\n    fetch(\"/accounts/createGroup\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      console.log(res);\n\n      if (res.success) {\n        // Return to account detail and display error message\n        resolve(res);\n      } else {\n        reject(\"Unable to retrieve data\");\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/FC-SERVER/food-commune/src/components/GroupsView.jsx"],"names":["React","Component","SearchBar","GroupList","CreateGroup","connect","withRouter","mapStateToProps","state","provisional","user","token","GroupsView","searchInput","showAddGroup","onSearch","ev","value","target","setState","addGroup","toggle","newGroup","payload","user_id","props","id","insertGroup","then","resolved","console","log","prevState","Clans","data","admin_id","push","catch","err","componentDidMount","history","location","query","option","componentWillMount","fetchData","render","backgroundColor","userid","Promise","resolve","reject","request","userId","options","method","headers","Headers","Authorization","body","JSON","stringify","entity","fetch","res","json","success"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADd;AAELC,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAFP;AAGLC,IAAAA,KAAK,EAAEH,KAAK,CAACG;AAHR,GAAP;AAKD,CAND;;AAQA,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCO,KADiC,GACzB;AACNK,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,YAAY,EAAE;AAFR,KADyB;;AAAA,SA2BjCC,QA3BiC,GA2BrBC,EAAD,IAAQ;AACjB,UAAIC,KAAK,GAAGD,EAAE,CAACE,MAAH,CAAUD,KAAtB;AACA,WAAKE,QAAL,CAAc;AAAEN,QAAAA,WAAW,EAAEI;AAAf,OAAd;AACD,KA9BgC;;AAAA,SAgCjCG,QAhCiC,GAgCrBC,MAAD,IAAY;AACrB,WAAKF,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAA0B,KAA1B,GAAkC;AAAlD,OAAd;AACD,KAlCgC;;AAAA,SAoCjCQ,QApCiC,GAoCrBC,OAAD,IAAa;AACtBA,MAAAA,OAAO,CAACC,OAAR,GAAkB,KAAKC,KAAL,CAAWf,IAAX,CAAgBgB,EAAlC;AAEAC,MAAAA,WAAW,CAAC,KAAKF,KAAL,CAAWd,KAAZ,EAAmBY,OAAnB,CAAX,CACGK,IADH,CACSC,QAAD,IAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,aAAKV,QAAL,CAAc;AAAEL,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACA,aAAKK,QAAL,CAAea,SAAD,IAAe;AAC3B,cAAIC,KAAK,GAAG,CAAC,GAAGD,SAAS,CAACE,IAAV,CAAeD,KAAnB,CAAZ;AACAV,UAAAA,OAAO,CAACY,QAAR,GAAmB,KAAKV,KAAL,CAAWf,IAAX,CAAgBgB,EAAnC;AACAO,UAAAA,KAAK,CAACG,IAAN,CAAWb,OAAX;AACA,cAAIW,IAAI,GAAG,EAAE,GAAGF,SAAS,CAACE,IAAf;AAAqBD,YAAAA,KAAK,EAAEA;AAA5B,WAAX;AACA,iBAAO;AAAEC,YAAAA,IAAI,EAAEA;AAAR,WAAP;AACD,SAND;AAOD,OAXH,EAYGG,KAZH,CAYUC,GAAD,IAAS;AACdR,QAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACD,OAdH;AAeD,KAtDgC;AAAA;;AAMjCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAI,KAAKd,KAAL,CAAWe,OAAX,CAAmBC,QAAnB,CAA4BC,KAAhC,EAAuC;AACrC,UAAIC,MAAM,GAAG,KAAKlB,KAAL,CAAWe,OAAX,CAAmBC,QAAnB,CAA4BC,KAA5B,CAAkCC,MAA/C,CADqC,CAGrC;;AACA,UAAIA,MAAJ,EAAY,KAAKxB,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACb;AACF;;AAED8B,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,SAAS,CAAC,KAAKpB,KAAL,CAAWd,KAAZ,EAAmB,KAAKc,KAAL,CAAWf,IAAX,CAAgBgB,EAAnC,CAAT,CACGE,IADH,CACSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAKV,QAAL,CAAc;AAAEe,QAAAA,IAAI,EAAEL;AAAR,OAAd;AACD,KAJH,EAKGQ,KALH,CAKUC,GAAD,IAAS;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACD,KAPH;AAQD;;AA+BDQ,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKvC,KAAL,CAAWM,YAAX,iBACC,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,KAAKQ,QAA5B;AAAsC,MAAA,QAAQ,EAAE,KAAKF,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAIE;AAAK,MAAA,EAAE,EAAC,YAAR;AAAqB,MAAA,SAAS,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,QAAQ,EAAE,KAAKL,QADjB;AAEE,MAAA,cAAc,EAAE,6BAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAKE,oBAAC,SAAD;AACE,MAAA,WAAW,EAAE,KAAKP,KAAL,CAAWK,WAD1B;AAEE,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAW0B,IAFnB;AAGE,MAAA,QAAQ,EAAE,KAAKd,QAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAJF,CAFF,CADF;AAqBD;;AA9EgC;;AAiFnC,eAAef,OAAO,CAACE,eAAD,CAAP,CAAyBD,UAAU,CAACM,UAAD,CAAnC,CAAf;;AAEA,SAASiC,SAAT,CAAmBlC,KAAnB,EAA0BqC,MAA1B,EAAkC;AAChClB,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCpB,KAAnC,EAA0CqC,MAA1C;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,OAAO,GAAG;AAAEC,MAAAA,MAAM,EAAEL;AAAV,KAAd;AACA,QAAIM,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnBC,QAAAA,aAAa,EAAE,YAAY/C,KADR;AAEnB,wBAAgB;AAFG,OAAZ,CAFG;AAMZgD,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,MAAM,EAAEV;AADW,OAAf;AANM,KAAd;AAUAW,IAAAA,KAAK,CAAC,kBAAD,EAAqBT,OAArB,CAAL,CACG1B,IADH,CACSoC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAHH,EAIGrC,IAJH,CAISoC,GAAD,IAAS;AACb,UAAI,CAACA,GAAG,CAACE,OAAT,EAAkB;AAChB;AACAhB,QAAAA,OAAO,CAACc,GAAD,CAAP;AACD,OAHD,MAGO;AACLb,QAAAA,MAAM,CAAC,yBAAD,CAAN;AACD;AACF,KAXH;AAYD,GAxBM,CAAP;AAyBD;;AAED,SAASxB,WAAT,CAAqBhB,KAArB,EAA4BY,OAA5B,EAAqC;AACnCO,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,SAAO,IAAIkB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIG,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnBC,QAAAA,aAAa,EAAE,YAAY/C,KADR;AAEnB,wBAAgB;AAFG,OAAZ,CAFG;AAMZgD,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,MAAM,EAAEvC;AADW,OAAf;AANM,KAAd;AAUAwC,IAAAA,KAAK,CAAC,uBAAD,EAA0BT,OAA1B,CAAL,CACG1B,IADH,CACSoC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAHH,EAIGrC,IAJH,CAISoC,GAAD,IAAS;AACblC,MAAAA,OAAO,CAACC,GAAR,CAAYiC,GAAZ;;AACA,UAAIA,GAAG,CAACE,OAAR,EAAiB;AACf;AACAhB,QAAAA,OAAO,CAACc,GAAD,CAAP;AACD,OAHD,MAGO;AACLb,QAAAA,MAAM,CAAC,yBAAD,CAAN;AACD;AACF,KAZH;AAaD,GAxBM,CAAP;AAyBD","sourcesContent":["import React, { Component } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport GroupList from \"./GroupList\";\r\nimport CreateGroup from \"./CreateGroup\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    provisional: state.provisional,\r\n    user: state.user,\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nclass GroupsView extends Component {\r\n  state = {\r\n    searchInput: \"\",\r\n    showAddGroup: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Value passed from Router > Link\r\n    if (this.props.history.location.query) {\r\n      let option = this.props.history.location.query.option;\r\n\r\n      // If the option flag exist and is true open add group window\r\n      if (option) this.setState({ showAddGroup: true });\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    fetchData(this.props.token, this.props.user.id)\r\n      .then((resolved) => {\r\n        console.log(resolved);\r\n        this.setState({ data: resolved });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  onSearch = (ev) => {\r\n    let value = ev.target.value;\r\n    this.setState({ searchInput: value });\r\n  };\r\n\r\n  addGroup = (toggle) => {\r\n    this.setState({ showAddGroup: this.state.showAddGroup ? false : true });\r\n  };\r\n\r\n  newGroup = (payload) => {\r\n    payload.user_id = this.props.user.id;\r\n\r\n    insertGroup(this.props.token, payload)\r\n      .then((resolved) => {\r\n        console.log(resolved);\r\n        this.setState({ showAddGroup: false });\r\n        this.setState((prevState) => {\r\n          let Clans = [...prevState.data.Clans];\r\n          payload.admin_id = this.props.user.id;\r\n          Clans.push(payload);\r\n          let data = { ...prevState.data, Clans: Clans };\r\n          return { data: data };\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <!-- Main Content --> */}\r\n        <div className=\"row\" style={{ backgroundColor: \"white\" }}>\r\n          {this.state.showAddGroup && (\r\n            <CreateGroup newGroup={this.newGroup} addGroup={this.addGroup} />\r\n          )}\r\n          <div id=\"group-view\" className=\"col-12\">\r\n            <SearchBar\r\n              onSearch={this.onSearch}\r\n              placeHolderVal={\"Search for group or area...\"}\r\n            />\r\n            <GroupList\r\n              searchValue={this.state.searchInput}\r\n              data={this.state.data}\r\n              addGroup={this.addGroup}\r\n            />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(GroupsView));\r\n\r\nfunction fetchData(token, userid) {\r\n  console.log(\"fetching data......\", token, userid);\r\n  return new Promise((resolve, reject) => {\r\n    let request = { userId: userid };\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\",\r\n      }),\r\n      body: JSON.stringify({\r\n        entity: request,\r\n      }),\r\n    };\r\n    fetch(\"/accounts/groups\", options)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (!res.success) {\r\n          // Return to account detail and display error message\r\n          resolve(res);\r\n        } else {\r\n          reject(\"Unable to retrieve data\");\r\n        }\r\n      });\r\n  });\r\n}\r\n\r\nfunction insertGroup(token, payload) {\r\n  console.log(\"fetching data......\");\r\n  return new Promise((resolve, reject) => {\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\",\r\n      }),\r\n      body: JSON.stringify({\r\n        entity: payload,\r\n      }),\r\n    };\r\n    fetch(\"/accounts/createGroup\", options)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.success) {\r\n          // Return to account detail and display error message\r\n          resolve(res);\r\n        } else {\r\n          reject(\"Unable to retrieve data\");\r\n        }\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}