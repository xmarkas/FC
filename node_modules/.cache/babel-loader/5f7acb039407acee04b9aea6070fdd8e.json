{"ast":null,"code":"/**\r\n *  PEPPER REDUX STORE - REDUCER\r\n * \r\n */\nimport { session, getToken } from '../../util/okta';\nconst initialState = {\n  user: null,\n  provisional: null,\n  token: null,\n  sessionExists: null\n};\n\nfunction rootReducer(state = initialState, action) {\n  if (Object.keys(reducers).includes(action.type)) {\n    return reducers[action.type](state, action.payload);\n  } else {\n    return state;\n  }\n}\n\n;\nlet reducers = {};\n\nreducers.OKTA_SESSION = async state => {\n  // Check for existing user session\n  let userSession = await session();\n  let tokenInfo = await getToken(userSession);\n  console.log(userSession, tokenInfo); // return session()\n  //     .then(session => {\n  //         console.log(\"SESSION\", session);\n  //         return getToken(session).\n  //             then(tokenInfo => {\n  //                 console.log(\"TOkenInfo\", tokenInfo);\n  //                 if (tokenInfo.provisional) {\n  //                     return {...state, provisional: tokenInfo.provisional}\n  //                 } else {\n  //                     return {...state, token: tokenInfo.token, user: tokenInfo.user}\n  //                 }\n  //             })\n  //             .catch(err => {\n  //                 console.log(err);\n  //         })\n  //     })\n};\n\nreducers.DIALPAD_SHOW = (state, payload) => {\n  let toggle = state.UI.dialPadShow ? false : true;\n  let dialPadShow = payload === \"toggle\" ? toggle : payload;\n  let UI = { ...state.UI,\n    dialPadShow: dialPadShow\n  };\n  return { ...state,\n    UI\n  };\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/store/reducers/index.js"],"names":["session","getToken","initialState","user","provisional","token","sessionExists","rootReducer","state","action","Object","keys","reducers","includes","type","payload","OKTA_SESSION","userSession","tokenInfo","console","log","DIALPAD_SHOW","toggle","UI","dialPadShow"],"mappings":"AAAA;;;;AAIA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,iBAAlC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,IADW;AAEjBC,EAAAA,WAAW,EAAE,IAFI;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,aAAa,EAAE;AAJE,CAArB;;AAQA,SAASC,WAAT,CAAqBC,KAAK,GAAGN,YAA7B,EAA2CO,MAA3C,EAAmD;AAC/C,MAAIC,MAAM,CAACC,IAAP,CAAYC,QAAZ,EAAsBC,QAAtB,CAA+BJ,MAAM,CAACK,IAAtC,CAAJ,EAAiD;AAC7C,WAAOF,QAAQ,CAACH,MAAM,CAACK,IAAR,CAAR,CAAsBN,KAAtB,EAA6BC,MAAM,CAACM,OAApC,CAAP;AACH,GAFD,MAEO;AACH,WAAOP,KAAP;AACH;AACJ;;AAAA;AAED,IAAII,QAAQ,GAAG,EAAf;;AAEAA,QAAQ,CAACI,YAAT,GAAwB,MAAOR,KAAP,IAAiB;AACrC;AACA,MAAIS,WAAW,GAAG,MAAMjB,OAAO,EAA/B;AACA,MAAIkB,SAAS,GAAG,MAAMjB,QAAQ,CAACgB,WAAD,CAA9B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAAyBC,SAAzB,EAJqC,CAKrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEH,CAvBD;;AAyBAN,QAAQ,CAACS,YAAT,GAAwB,CAACb,KAAD,EAAQO,OAAR,KAAoB;AACxC,MAAIO,MAAM,GAAGd,KAAK,CAACe,EAAN,CAASC,WAAT,GAAuB,KAAvB,GAA+B,IAA5C;AACA,MAAIA,WAAW,GAAGT,OAAO,KAAK,QAAZ,GAAuBO,MAAvB,GAAgCP,OAAlD;AACA,MAAIQ,EAAE,GAAG,EAAE,GAAGf,KAAK,CAACe,EAAX;AAAeC,IAAAA,WAAW,EAAEA;AAA5B,GAAT;AACA,SAAO,EAAE,GAAGhB,KAAL;AAAYe,IAAAA;AAAZ,GAAP;AACH,CALD;;AASA,eAAehB,WAAf","sourcesContent":["/**\r\n *  PEPPER REDUX STORE - REDUCER\r\n * \r\n */\r\nimport { session, getToken } from '../../util/okta';\r\n\r\nconst initialState = {\r\n    user: null,\r\n    provisional: null,\r\n    token: null,\r\n    sessionExists: null\r\n\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    if (Object.keys(reducers).includes(action.type)) {\r\n        return reducers[action.type](state, action.payload);\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\n\r\nlet reducers = {};\r\n\r\nreducers.OKTA_SESSION = async (state) => {\r\n    // Check for existing user session\r\n    let userSession = await session();\r\n    let tokenInfo = await getToken(userSession);\r\n    console.log(userSession, tokenInfo);\r\n    // return session()\r\n    //     .then(session => {\r\n    //         console.log(\"SESSION\", session);\r\n    //         return getToken(session).\r\n    //             then(tokenInfo => {\r\n    //                 console.log(\"TOkenInfo\", tokenInfo);\r\n    //                 if (tokenInfo.provisional) {\r\n    //                     return {...state, provisional: tokenInfo.provisional}\r\n    //                 } else {\r\n    //                     return {...state, token: tokenInfo.token, user: tokenInfo.user}\r\n    //                 }\r\n    //             })\r\n    //             .catch(err => {\r\n    //                 console.log(err);\r\n    //         })\r\n\r\n    //     })\r\n    \r\n}\r\n\r\nreducers.DIALPAD_SHOW = (state, payload) => {\r\n    let toggle = state.UI.dialPadShow ? false : true;\r\n    let dialPadShow = payload === \"toggle\" ? toggle : payload;\r\n    let UI = { ...state.UI, dialPadShow: dialPadShow };\r\n    return { ...state, UI }\r\n}\r\n\r\n\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}