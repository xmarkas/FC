{"ast":null,"code":"/**\r\n *  PEPPER REDUX STORE - REDUCER\r\n * \r\n */\nimport ContactUtil from \"../../util/contacts.js\";\nconst initialState = {\n  calls: {\n    callStack: [],\n    displayCall: null,\n    clanCall: null\n  },\n  contactData: [],\n  UI: {\n    flip: 180,\n    dialPadShow: true,\n    accountShow: false,\n    popMessage: null\n  },\n  user: {\n    id: null,\n    PlivoUser: null,\n    socket: false\n  }\n};\n\nfunction rootReducer(state = initialState, action) {\n  if (Object.keys(reducers).includes(action.type)) {\n    return reducers[action.type](state, action.payload);\n  } else {\n    return state;\n  }\n}\n\n;\nlet reducers = {};\n\nreducers.FLIP_DISPLAY = state => {\n  let deg = state.UI.flip === 180 ? 0 : 180;\n  let UI = { ...state.UI,\n    flip: deg\n  };\n  return { ...state,\n    UI: UI\n  };\n};\n\nreducers.DIALPAD_SHOW = (state, payload) => {\n  let toggle = state.UI.dialPadShow ? false : true;\n  let dialPadShow = payload === \"toggle\" ? toggle : payload;\n  let UI = { ...state.UI,\n    dialPadShow: dialPadShow\n  };\n  return { ...state,\n    UI\n  };\n};\n\nreducers.ACCOUNT_SHOW = (state, payload) => {\n  let toggle = state.UI.accountShow ? false : true;\n  let accountShow = payload === \"toggle\" ? toggle : payload;\n  let UI = { ...state.UI,\n    accountShow: accountShow\n  };\n  return { ...state,\n    UI\n  };\n};\n\nreducers.ADD_CONTACT = (state, payload) => {\n  let data = ContactUtil.contactsWithSameNumber(payload, state.contactData);\n  data.push(ContactUtil.addContact(payload));\n  return { ...state,\n    contactData: data\n  };\n};\n\nreducers.EDIT_CONTACT = (state, payload) => {\n  let contacts = [...state.contactData];\n  let {\n    name,\n    phone,\n    altPhone,\n    email\n  } = payload.data;\n  contacts[payload.editIndex] = { ...contacts[payload.editIndex],\n    name: name,\n    phone: phone,\n    altPhone: altPhone,\n    email: email\n  };\n  return { ...state,\n    contactData: contacts\n  };\n};\n\nreducers.TOGGLE_FAVORITE = (state, payload) => {\n  let contacts = [...state.contactData];\n  contacts[payload.index].type = payload.type;\n  return { ...state,\n    contactData: contacts\n  };\n};\n\nreducers.POP_MESSAGE = (state, payload) => {\n  let UI = { ...state.UI,\n    popMessage: payload\n  };\n  return { ...state,\n    UI\n  };\n};\n\nreducers.SET_USER_ID = (state, payload) => {\n  if (payload.method === \"id\") {\n    return { ...state,\n      user: { ...state.user,\n        id: payload.data\n      }\n    };\n  } else if (payload.method === \"PlivoUser\") {\n    return { ...state,\n      user: { ...state.user,\n        PlivoUser: payload.data\n      }\n    };\n  } else if (payload.method === \"SocketSuccess\") {\n    if (payload.data === true) {\n      return { ...state,\n        user: { ...state.user,\n          socket: true\n        }\n      };\n    } else {\n      return { ...state,\n        user: { ...state.user,\n          socket: false\n        }\n      };\n    }\n  }\n};\n\nreducers.ADD_CALL = (state, payload) => {\n  let stack = [...state.calls.callStack];\n  stack.unshift(payload);\n  let calls = { ...state.calls,\n    callStack: stack\n  };\n  return { ...state,\n    calls: calls\n  };\n};\n\nreducers.UPDATE_STACK = (state, payload) => {\n  let calls = { ...state.calls,\n    callStack: payload\n  };\n  return { ...state,\n    calls: calls\n  };\n};\n\nreducers.MAKE_DISPLAY_CALL = (state, payload) => {\n  let calls = { ...state.calls,\n    displayCall: payload\n  };\n  return { ...state,\n    calls: calls\n  };\n};\n\nreducers.SET_CLAN_CALL = (state, payload) => {\n  return { ...state,\n    calls: { ...state.calls,\n      clanCall: payload\n    }\n  };\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/store/reducers/index.js"],"names":["ContactUtil","initialState","calls","callStack","displayCall","clanCall","contactData","UI","flip","dialPadShow","accountShow","popMessage","user","id","PlivoUser","socket","rootReducer","state","action","Object","keys","reducers","includes","type","payload","FLIP_DISPLAY","deg","DIALPAD_SHOW","toggle","ACCOUNT_SHOW","ADD_CONTACT","data","contactsWithSameNumber","push","addContact","EDIT_CONTACT","contacts","name","phone","altPhone","email","editIndex","TOGGLE_FAVORITE","index","POP_MESSAGE","SET_USER_ID","method","ADD_CALL","stack","unshift","UPDATE_STACK","MAKE_DISPLAY_CALL","SET_CLAN_CALL"],"mappings":"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","sourcesContent":["/**\r\n *  PEPPER REDUX STORE - REDUCER\r\n * \r\n */\r\nimport ContactUtil from \"../../util/contacts.js\";\r\n\r\nconst initialState = {\r\n    calls: {\r\n        callStack: [],\r\n        displayCall: null,\r\n        clanCall: null\r\n    },\r\n    contactData: [],\r\n    UI: {\r\n        flip: 180,\r\n        dialPadShow: true,\r\n        accountShow: false,\r\n        popMessage: null\r\n    },\r\n    user: {\r\n        id: null,\r\n        PlivoUser: null,\r\n        socket: false\r\n    }\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    if (Object.keys(reducers).includes(action.type)) {\r\n        return reducers[action.type](state, action.payload);\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\n\r\nlet reducers = {};\r\n\r\nreducers.FLIP_DISPLAY = (state) => {\r\n    let deg = state.UI.flip === 180 ? 0 : 180;\r\n    let UI = { ...state.UI, flip: deg };\r\n    return { ...state, UI: UI };\r\n}\r\n\r\nreducers.DIALPAD_SHOW = (state, payload) => {\r\n    let toggle = state.UI.dialPadShow ? false : true;\r\n    let dialPadShow = payload === \"toggle\" ? toggle : payload;\r\n    let UI = { ...state.UI, dialPadShow: dialPadShow };\r\n    return { ...state, UI }\r\n}\r\n\r\nreducers.ACCOUNT_SHOW = (state, payload) => {\r\n    let toggle = state.UI.accountShow ? false : true;\r\n    let accountShow = payload === \"toggle\" ? toggle : payload;\r\n    let UI = { ...state.UI, accountShow: accountShow };\r\n    return { ...state, UI }\r\n}\r\n\r\nreducers.ADD_CONTACT = (state, payload) => {\r\n    let data = ContactUtil.contactsWithSameNumber(payload, state.contactData);\r\n    data.push(ContactUtil.addContact(payload));\r\n    return { ...state, contactData: data }\r\n}\r\n\r\nreducers.EDIT_CONTACT = (state, payload) => {\r\n    let contacts = [...state.contactData];\r\n    let { name, phone, altPhone, email } = payload.data;\r\n    contacts[payload.editIndex] = {\r\n        ...contacts[payload.editIndex],\r\n        name: name,\r\n        phone: phone,\r\n        altPhone: altPhone,\r\n        email: email\r\n    }\r\n    return { ...state, contactData: contacts };\r\n}\r\n\r\nreducers.TOGGLE_FAVORITE = (state, payload) => {\r\n    let contacts = [...state.contactData];\r\n    contacts[payload.index].type = payload.type;\r\n    return { ...state, contactData: contacts };\r\n}\r\n\r\nreducers.POP_MESSAGE = (state, payload) => {\r\n    let UI = { ...state.UI, popMessage: payload };\r\n    return { ...state, UI };\r\n}\r\n\r\nreducers.SET_USER_ID = (state, payload) => {\r\n    if (payload.method === \"id\") {\r\n        return { ...state, user: {...state.user, id: payload.data } };\r\n    } else if (payload.method === \"PlivoUser\") {\r\n        return { ...state, user: {...state.user, PlivoUser: payload.data } };\r\n    } else if (payload.method === \"SocketSuccess\") {\r\n        if (payload.data === true) {\r\n            return { ...state, user: { ...state.user, socket: true } };\r\n        } else {\r\n            return { ...state, user: { ...state.user, socket: false } };\r\n        }\r\n    }\r\n}\r\n\r\nreducers.ADD_CALL = (state, payload) => {\r\n    let stack = [...state.calls.callStack];\r\n    stack.unshift(payload);\r\n    let calls = { ...state.calls, callStack: stack };\r\n    return { ...state, calls: calls };\r\n}\r\n\r\nreducers.UPDATE_STACK = (state, payload) => {\r\n    let calls = { ...state.calls, callStack: payload };\r\n    return { ...state, calls: calls };\r\n}\r\n\r\nreducers.MAKE_DISPLAY_CALL = (state, payload) => {\r\n    let calls = { ...state.calls, displayCall: payload };\r\n    return { ...state, calls: calls };\r\n}\r\n\r\nreducers.SET_CLAN_CALL = (state, payload) => { \r\n    return { ...state, calls: { ...state.calls, clanCall: payload } };\r\n}\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}