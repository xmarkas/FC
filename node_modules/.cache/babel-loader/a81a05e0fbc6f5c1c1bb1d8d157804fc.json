{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\Qumoc\\\\food-commune\\\\src\\\\components\\\\GroupsView.jsx\";\nimport React, { Component } from 'react';\n\nclass GroupsView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchInput: \"\",\n      showAddGroup: false\n    };\n\n    this.viewData = () => {\n      fetchData(this.state.token, this.state.user.id).then(resolved => {\n        console.log(resolved);\n        this.setState({\n          data: resolved\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.setToken = token => {\n      this.setState({\n        token: token\n      });\n    };\n\n    this.setUser = user => {\n      this.setState({\n        user: user\n      });\n    };\n\n    this.onSearch = ev => {\n      let value = ev.target.value;\n      this.setState({\n        searchInput: value\n      });\n    };\n\n    this.addGroup = toggle => {\n      this.setState({\n        showAddGroup: this.state.showAddGroup ? false : true\n      });\n    };\n\n    this.newGroup = payload => {\n      payload.user_id = this.state.user.id;\n      insertGroup(this.state.token, payload).then(resolved => {\n        console.log(resolved); // this.setState((prevState) => {\n        //     let Deals = [...prevState.data.Deals];\n        //     let deal = Deals.findIndex(obj => { return obj.id === payload.id });\n        //     Deals[deal] = payload;\n        //     let data = { ...prevState.data, Deals: Deals }  \n        //     return { data: data };\n        // }, () => {\n        //         this.setState({ showAddDeal: false });\n        // })\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  componentDidMount() {\n    let params = new URLSearchParams(window.location.search);\n    let option = params.get(\"option\");\n    if (option) this.setState({\n      showAddGroup: true\n    });\n  }\n  /****************************************************\r\n   * Component Data\r\n   */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"nav-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        backgroundColor: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, this.state.showAddGroup && /*#__PURE__*/React.createElement(CreateGroup, {\n      newGroup: this.newGroup,\n      addGroup: this.addGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"group-view\",\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, {\n      onSearch: this.onSearch,\n      placeHolderVal: \"Search for group or area...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(GroupList, {\n      searchValue: this.state.searchInput,\n      data: this.state.data,\n      addGroup: this.addGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default GroupsView;\n\nfunction fetchData(token, userid) {\n  console.log(\"fetching data......\", token, userid);\n  return new Promise((resolve, reject) => {\n    let request = {\n      userId: userid\n    };\n    let options = {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify({\n        entity: request\n      })\n    };\n    fetch(\"/foodcommune/accounts/groups\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      if (!res.success) {\n        // Return to account detail and display error message\n        resolve(res);\n      } else {\n        reject(\"Unable to retrieve data\");\n      }\n    });\n  });\n}\n\nfunction insertGroup(token, payload) {\n  console.log(\"fetching data......\");\n  return new Promise((resolve, reject) => {\n    let options = {\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      }),\n      body: JSON.stringify({\n        entity: payload\n      })\n    };\n    fetch(\"/foodcommune/accounts/createGroup\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      console.log(res);\n\n      if (res.success) {\n        // Return to account detail and display error message\n        resolve(res);\n      } else {\n        reject(\"Unable to retrieve data\");\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/components/GroupsView.jsx"],"names":["React","Component","GroupsView","state","searchInput","showAddGroup","viewData","fetchData","token","user","id","then","resolved","console","log","setState","data","catch","err","setToken","setUser","onSearch","ev","value","target","addGroup","toggle","newGroup","payload","user_id","insertGroup","componentDidMount","params","URLSearchParams","window","location","search","option","get","render","backgroundColor","userid","Promise","resolve","reject","request","userId","options","method","headers","Headers","Authorization","body","JSON","stringify","entity","fetch","res","json","success"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass GroupsView extends Component {\r\n  state = {\r\n    searchInput: \"\",\r\n    showAddGroup: false\r\n    };\r\n    \r\n  componentDidMount() {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let option = params.get(\"option\");\r\n\r\n    if (option) this.setState({ showAddGroup: true });\r\n}\r\n  \r\n  /****************************************************\r\n   * Component Data\r\n   */\r\n  viewData = () => {\r\n    fetchData(this.state.token, this.state.user.id)\r\n      .then(resolved => {\r\n        console.log(resolved);\r\n        this.setState({ data: resolved });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  setToken = token => {\r\n    this.setState({ token: token });\r\n  };\r\n\r\n  setUser = user => {\r\n    this.setState({ user: user });\r\n  };\r\n  /*************************************************** */\r\n  onSearch = ev => {\r\n    let value = ev.target.value;\r\n\r\n    this.setState({ searchInput: value });\r\n  };\r\n\r\n  addGroup = (toggle) => {\r\n    this.setState({ showAddGroup: this.state.showAddGroup ? false : true });\r\n  }\r\n\r\n  newGroup = (payload) => {\r\n    payload.user_id = this.state.user.id;\r\n    \r\n    insertGroup(this.state.token, payload)\r\n      .then(resolved => {\r\n          console.log(resolved);\r\n          // this.setState((prevState) => {\r\n          //     let Deals = [...prevState.data.Deals];\r\n          //     let deal = Deals.findIndex(obj => { return obj.id === payload.id });\r\n          //     Deals[deal] = payload;\r\n\r\n          //     let data = { ...prevState.data, Deals: Deals }  \r\n          //     return { data: data };\r\n          // }, () => {\r\n          //         this.setState({ showAddDeal: false });\r\n          // })\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n        <React.Fragment>\r\n          {/* <!-- Navigation --> */}\r\n          <div id=\"nav-view\">\r\n            {/* <NavView\r\n              setToken={this.setToken}\r\n              setUser={this.setUser}\r\n              viewData={this.viewData}\r\n            /> */}\r\n          </div>\r\n\r\n          {/* <!-- Main Content --> */}\r\n        <div className=\"row\" style={{ backgroundColor: \"white\" }}>\r\n          {this.state.showAddGroup && <CreateGroup newGroup={this.newGroup} addGroup={this.addGroup}/>}\r\n            <div id=\"group-view\" className=\"col-12\">\r\n              <SearchBar\r\n                onSearch={this.onSearch}\r\n                placeHolderVal={\"Search for group or area...\"}\r\n              />\r\n              <GroupList\r\n                searchValue={this.state.searchInput}\r\n              data={this.state.data}\r\n              addGroup={this.addGroup}\r\n              />\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupsView;\r\n\r\nfunction fetchData(token, userid) {\r\n  console.log(\"fetching data......\", token, userid);\r\n  return new Promise((resolve, reject) => {\r\n    let request = { userId: userid };\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify({\r\n        entity: request\r\n      })\r\n    };\r\n    fetch(\"/foodcommune/accounts/groups\", options)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(res => {\r\n        if (!res.success) {\r\n          // Return to account detail and display error message\r\n          resolve(res);\r\n        } else {\r\n          reject(\"Unable to retrieve data\");\r\n        }\r\n      });\r\n  });\r\n}\r\n\r\nfunction insertGroup(token, payload) {\r\n  console.log(\"fetching data......\");\r\n  return new Promise((resolve, reject) => {\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        Authorization: \"Bearer \" + token,\r\n        \"Content-Type\": \"application/json\"\r\n      }),\r\n      body: JSON.stringify({\r\n        entity: payload\r\n      })\r\n    };\r\n    fetch(\"/foodcommune/accounts/createGroup\", options)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.success) {\r\n          // Return to account detail and display error message\r\n          resolve(res);\r\n        } else {\r\n          reject(\"Unable to retrieve data\");\r\n        }\r\n      });\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}