{"ast":null,"code":"/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\nconsole.log(\"running auth client..\"); //  Okta browser SDK AuthClient\n\nvar config = {\n  issuer: \"https://dev-236245.okta.com/oauth2/default\",\n  clientId: \"0oa4lqivbsKPbAtfs4x6\",\n  redirectUri: \"https://qumoc.com/foodcommune\",\n  responseMode: \"fragment\",\n  tokenManager: {\n    storage: \"sessionStorage\"\n  },\n  onSessionExpired: function () {\n    console.log(\"re-authorization is required\"); // authClient.getWithRedirect();\n  }\n}; // AUTH CLIENT\n\nlet authClient = new window.OktaAuth(config);\nexport const session = async () => {\n  // let authClient = this.state.authClient;\n  let i = await authClient.session.exists().then(resolved => {\n    console.log(resolved);\n    return resolved;\n  });\n  console.log(i);\n  return i;\n};\nexport const getToken = async session => {\n  // Check for user session\n  if (session) {\n    let user = await authClient.session.get(); // Request token for API access\n\n    let options = {\n      method: \"POST\",\n      mode: \"same-origin\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        entity: {\n          login: user.login,\n          request: \"test\"\n        }\n      })\n    };\n    fetch(\"/foodcommune/secure\", options).then(res => {\n      if (res) return res.json();\n    }).then(res => {\n      if (res.success) {\n        // if (this.props.setToken) this.props.setToken(res.token);\n        // if (this.props.setUser) this.props.setUser(res.user);\n        return {\n          token: res.token,\n          user: res.user\n        };\n      }\n    }) // .then(() => {\n    //     if (this.props.viewData) this.props.viewData();\n    // })\n    .catch(err => {\n      console.log(err);\n    });\n  } else {\n    //     this.setState({ session: false });\n    //     console.log(window.location.href)\n    //   If signed out and not on home page redirect\n    //   if (window.location.href !== \"/foodcommune/\") {\n    // setTimeout(function() {\n    //   window.location.replace(\"/foodcommune\");\n    // }, 1);\n    //   }\n    // Get provisional site access\n    let options = {\n      method: \"POST\",\n      mode: \"same-origin\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({})\n    };\n    fetch(\"/foodcommune/secure/provisional\", options).then(res => {\n      return res.json();\n    }).then(res => {\n      // this.setState({ provisional: res.token });\n      // this.props.updateParentState({ provisional: res.token });\n      return {\n        provisional: res.token\n      };\n    }).catch(err => {\n      console.log(err);\n      return {\n        provisional: res.token\n      };\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/util/okta.js"],"names":["console","log","config","issuer","clientId","redirectUri","responseMode","tokenManager","storage","onSessionExpired","authClient","window","OktaAuth","session","i","exists","then","resolved","getToken","user","get","options","method","mode","credentials","headers","body","JSON","stringify","entity","login","request","fetch","res","json","success","token","catch","err","provisional"],"mappings":"AAAA;;;;;AAKAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,E,CACA;;AACA,IAAIC,MAAM,GAAG;AACTC,EAAAA,MAAM,EAAE,4CADC;AAETC,EAAAA,QAAQ,EAAE,sBAFD;AAGTC,EAAAA,WAAW,EAAE,+BAHJ;AAITC,EAAAA,YAAY,EAAE,UAJL;AAKTC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE;AADC,GALL;AAQTC,EAAAA,gBAAgB,EAAE,YAAY;AAC1BT,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAD0B,CAE1B;AACH;AAXQ,CAAb,C,CAcA;;AACA,IAAIS,UAAU,GAAG,IAAIC,MAAM,CAACC,QAAX,CAAoBV,MAApB,CAAjB;AAEA,OAAO,MAAMW,OAAO,GAAG,YAAY;AAC/B;AACA,MAAIC,CAAC,GAAG,MAAMJ,UAAU,CAACG,OAAX,CAAmBE,MAAnB,GACTC,IADS,CACJC,QAAQ,IAAI;AACdjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACA,WAAOA,QAAP;AACH,GAJS,CAAd;AAMAjB,EAAAA,OAAO,CAACC,GAAR,CAAYa,CAAZ;AACA,SAAOA,CAAP;AACH,CAVM;AAYP,OAAO,MAAMI,QAAQ,GAAG,MAAOL,OAAP,IAAmB;AACvC;AACA,MAAIA,OAAJ,EAAa;AACT,QAAIM,IAAI,GAAG,MAAMT,UAAU,CAACG,OAAX,CAAmBO,GAAnB,EAAjB,CADS,CAGT;;AACA,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,IAAI,EAAE,aAFI;AAGVC,MAAAA,WAAW,EAAE,aAHH;AAIVC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAJC;AAOVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEX,IAAI,CAACW,KAAd;AAAqBC,UAAAA,OAAO,EAAE;AAA9B;AAAV,OAAf;AAPI,KAAd;AAUAC,IAAAA,KAAK,CAAC,qBAAD,EAAwBX,OAAxB,CAAL,CACKL,IADL,CACUiB,GAAG,IAAI;AACT,UAAIA,GAAJ,EAAS,OAAOA,GAAG,CAACC,IAAJ,EAAP;AACZ,KAHL,EAIKlB,IAJL,CAIUiB,GAAG,IAAI;AACT,UAAIA,GAAG,CAACE,OAAR,EAAiB;AACb;AACA;AACA,eAAO;AAAEC,UAAAA,KAAK,EAAEH,GAAG,CAACG,KAAb;AAAoBjB,UAAAA,IAAI,EAAEc,GAAG,CAACd;AAA9B,SAAP;AACH;AACJ,KAVL,EAWI;AACA;AACA;AAbJ,KAcKkB,KAdL,CAcWC,GAAG,IAAI;AACVtC,MAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AACH,KAhBL;AAiBH,GA/BD,MA+BO;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAAIjB,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,IAAI,EAAE,aAFI;AAGVC,MAAAA,WAAW,EAAE,aAHH;AAIVC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAJC;AAOVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EAAf;AAPI,KAAd;AASAI,IAAAA,KAAK,CAAC,iCAAD,EAAoCX,OAApC,CAAL,CACKL,IADL,CACUiB,GAAG,IAAI;AACT,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAHL,EAIKlB,IAJL,CAIUiB,GAAG,IAAI;AACT;AACA;AACA,aAAO;AAAEM,QAAAA,WAAW,EAAEN,GAAG,CAACG;AAAnB,OAAP;AACH,KARL,EASKC,KATL,CASWC,GAAG,IAAI;AACVtC,MAAAA,OAAO,CAACC,GAAR,CAAYqC,GAAZ;AACA,aAAO;AAAEC,QAAAA,WAAW,EAAEN,GAAG,CAACG;AAAnB,OAAP;AACH,KAZL;AAaH;AACJ,CAnEM","sourcesContent":["/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\r\nconsole.log(\"running auth client..\");\r\n//  Okta browser SDK AuthClient\r\nvar config = {\r\n    issuer: \"https://dev-236245.okta.com/oauth2/default\",\r\n    clientId: \"0oa4lqivbsKPbAtfs4x6\",\r\n    redirectUri: \"https://qumoc.com/foodcommune\",\r\n    responseMode: \"fragment\",\r\n    tokenManager: {\r\n        storage: \"sessionStorage\"\r\n    },\r\n    onSessionExpired: function () {\r\n        console.log(\"re-authorization is required\");\r\n        // authClient.getWithRedirect();\r\n    }\r\n};\r\n\r\n// AUTH CLIENT\r\nlet authClient = new window.OktaAuth(config);\r\n\r\nexport const session = async () => {\r\n    // let authClient = this.state.authClient;\r\n    let i = await authClient.session.exists()\r\n        .then(resolved => {\r\n            console.log(resolved);\r\n            return resolved;\r\n        })\r\n\r\n    console.log(i)\r\n    return i;\r\n}\r\n\r\nexport const getToken = async (session) => {\r\n    // Check for user session\r\n    if (session) {\r\n        let user = await authClient.session.get();\r\n\r\n        // Request token for API access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ entity: { login: user.login, request: \"test\" } })\r\n        };\r\n\r\n        fetch(\"/foodcommune/secure\", options)\r\n            .then(res => {\r\n                if (res) return res.json();\r\n            })\r\n            .then(res => {\r\n                if (res.success) {\r\n                    // if (this.props.setToken) this.props.setToken(res.token);\r\n                    // if (this.props.setUser) this.props.setUser(res.user);\r\n                    return { token: res.token, user: res.user };\r\n                }\r\n            })\r\n            // .then(() => {\r\n            //     if (this.props.viewData) this.props.viewData();\r\n            // })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    } else {\r\n        //     this.setState({ session: false });\r\n        //     console.log(window.location.href)\r\n        //   If signed out and not on home page redirect\r\n        //   if (window.location.href !== \"/foodcommune/\") {\r\n        // setTimeout(function() {\r\n        //   window.location.replace(\"/foodcommune\");\r\n        // }, 1);\r\n        //   }\r\n\r\n        // Get provisional site access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ })\r\n        };\r\n        fetch(\"/foodcommune/secure/provisional\", options)\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(res => {\r\n                // this.setState({ provisional: res.token });\r\n                // this.props.updateParentState({ provisional: res.token });\r\n                return { provisional: res.token };\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                return { provisional: res.token };\r\n            })\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}