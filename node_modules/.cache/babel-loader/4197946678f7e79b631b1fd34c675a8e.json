{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\Qumoc\\\\food-commune\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\xmark\\\\Desktop\\\\Code\\\\Servers\\\\Qumoc\\\\food-commune\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */import store from'../store/js/index';import{setSession}from'../store/actions/index';// import OktaAuth from '@okta/okta-auth-js';\nvar OktaAuth=require('@okta/okta-auth-js');console.log(\"running auth client..\");//  Okta browser SDK AuthClient\nvar config={issuer:\"https://dev-236245.okta.com/oauth2/default\",clientId:\"0oa4lqivbsKPbAtfs4x6\",redirectUri:\"https://qumoc.com/foodcommune\",responseMode:\"fragment\",tokenManager:{storage:\"sessionStorage\"},onSessionExpired:function onSessionExpired(){console.log(\"re-authorization is required\");// authClient.getWithRedirect();\n}};// AUTH CLIENT\nvar authClient=new OktaAuth(config);export var session=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var options;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:options={method:\"POST\",mode:\"same-origin\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"}};fetch(\"/foodcommune/site/usersession\",options).then(function(res){console.log(res);}).catch(function(err){console.log(err);});return _context.abrupt(\"return\",true);case 3:case\"end\":return _context.stop();}}},_callee);}));return function session(){return _ref.apply(this,arguments);};}();export var getToken=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(session){var options,_options;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"GETTOKEN\");// Check for user session\nif(session){// Request token for API access\noptions={method:\"POST\",mode:\"same-origin\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({entity:{login:session.user.profile.login,request:\"test\"}})};fetch(\"/foodcommune/secure\",options).then(function(res){if(res)return res.json();}).then(function(res){if(res.success){store.dispatch(setSession({token:res.token,user:res.user}));// Set secure cookies\n// document.cookie = `fc-user-auth = ${res.token};expires=`\n}}).catch(function(err){console.log(err);});}else{// Get provisional site access\n_options={method:\"POST\",mode:\"same-origin\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({})};fetch(\"/foodcommune/secure/provisional\",_options).then(function(res){return res.json();}).then(function(res){store.dispatch(setSession({provisional:res.token}));}).catch(function(err){console.log(err);store.dispatch(setSession({provisional:\"test token\"}));});}case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function getToken(_x){return _ref2.apply(this,arguments);};}();export var signInAuthenticate=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(email,password){var transaction;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return authClient.signIn({username:email,password:password}).catch(function(err){// this.setState({ errMsg: \"Email or password is incorrect!\" });\nconsole.log(err);}).then(function(res){console.log(res);if(res.status==='SUCCESS'){getToken(res);}});case 2:transaction=_context3.sent;case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function signInAuthenticate(_x2,_x3){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/xmark/Desktop/Code/Servers/Qumoc/food-commune/src/util/okta.js"],"names":["store","setSession","OktaAuth","require","console","log","config","issuer","clientId","redirectUri","responseMode","tokenManager","storage","onSessionExpired","authClient","session","options","method","mode","credentials","headers","fetch","then","res","catch","err","getToken","body","JSON","stringify","entity","login","user","profile","request","json","success","dispatch","token","provisional","signInAuthenticate","email","password","signIn","username","status","transaction"],"mappings":"+WAAA;;;;GAKA,MAAOA,CAAAA,KAAP,KAAkB,mBAAlB,CACA,OAASC,UAAT,KAA2B,wBAA3B,CACA;AACA,GAAIC,CAAAA,QAAQ,CAAGC,OAAO,CAAC,oBAAD,CAAtB,CAIAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EACA;AACA,GAAIC,CAAAA,MAAM,CAAG,CACTC,MAAM,CAAE,4CADC,CAETC,QAAQ,CAAE,sBAFD,CAGTC,WAAW,CAAE,+BAHJ,CAITC,YAAY,CAAE,UAJL,CAKTC,YAAY,CAAE,CACVC,OAAO,CAAE,gBADC,CALL,CAQTC,gBAAgB,CAAE,2BAAY,CAC1BT,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACA;AACH,CAXQ,CAAb,CAcA;AACA,GAAIS,CAAAA,UAAU,CAAG,GAAIZ,CAAAA,QAAJ,CAAaI,MAAb,CAAjB,CAGA,MAAO,IAAMS,CAAAA,OAAO,0FAAG,+IACfC,OADe,CACL,CACVC,MAAM,CAAE,MADE,CAEVC,IAAI,CAAE,aAFI,CAGVC,WAAW,CAAE,aAHH,CAIVC,OAAO,CAAE,CACL,eAAgB,kBADX,CAJC,CADK,CAUnBC,KAAK,CAAC,+BAAD,CAAkCL,OAAlC,CAAL,CACKM,IADL,CACU,SAAAC,GAAG,CAAI,CACTnB,OAAO,CAACC,GAAR,CAAYkB,GAAZ,EACH,CAHL,EAIKC,KAJL,CAIW,SAAAC,GAAG,CAAI,CACVrB,OAAO,CAACC,GAAR,CAAYoB,GAAZ,EACH,CANL,EAVmB,gCAkBZ,IAlBY,wDAAH,kBAAPV,CAAAA,OAAO,0CAAb,CAqBP,MAAO,IAAMW,CAAAA,QAAQ,2FAAG,kBAAOX,OAAP,2IACpBX,OAAO,CAACC,GAAR,CAAY,UAAZ,EACA;AACA,GAAIU,OAAJ,CAAa,CAET;AACIC,OAHK,CAGK,CACVC,MAAM,CAAE,MADE,CAEVC,IAAI,CAAE,aAFI,CAGVC,WAAW,CAAE,aAHH,CAIVC,OAAO,CAAE,CACL,eAAgB,kBADX,CAJC,CAOVO,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEC,MAAM,CAAE,CAAEC,KAAK,CAAEhB,OAAO,CAACiB,IAAR,CAAaC,OAAb,CAAqBF,KAA9B,CAAqCG,OAAO,CAAE,MAA9C,CAAV,CAAf,CAPI,CAHL,CAaTb,KAAK,CAAC,qBAAD,CAAwBL,OAAxB,CAAL,CACKM,IADL,CACU,SAAAC,GAAG,CAAI,CACT,GAAIA,GAAJ,CAAS,MAAOA,CAAAA,GAAG,CAACY,IAAJ,EAAP,CACZ,CAHL,EAIKb,IAJL,CAIU,SAAAC,GAAG,CAAI,CACT,GAAIA,GAAG,CAACa,OAAR,CAAiB,CACbpC,KAAK,CAACqC,QAAN,CAAepC,UAAU,CAAC,CAAEqC,KAAK,CAAEf,GAAG,CAACe,KAAb,CAAoBN,IAAI,CAAET,GAAG,CAACS,IAA9B,CAAD,CAAzB,EAEA;AACA;AACH,CACJ,CAXL,EAYKR,KAZL,CAYW,SAAAC,GAAG,CAAI,CACVrB,OAAO,CAACC,GAAR,CAAYoB,GAAZ,EACH,CAdL,EAeH,CA5BD,IA4BO,CAEH;AACIT,QAHD,CAGW,CACVC,MAAM,CAAE,MADE,CAEVC,IAAI,CAAE,aAFI,CAGVC,WAAW,CAAE,aAHH,CAIVC,OAAO,CAAE,CACL,eAAgB,kBADX,CAJC,CAOVO,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,EAAf,CAPI,CAHX,CAYHR,KAAK,CAAC,iCAAD,CAAoCL,QAApC,CAAL,CACKM,IADL,CACU,SAAAC,GAAG,CAAI,CACT,MAAOA,CAAAA,GAAG,CAACY,IAAJ,EAAP,CACH,CAHL,EAIKb,IAJL,CAIU,SAAAC,GAAG,CAAI,CACTvB,KAAK,CAACqC,QAAN,CAAepC,UAAU,CAAC,CAAEsC,WAAW,CAAEhB,GAAG,CAACe,KAAnB,CAAD,CAAzB,EACH,CANL,EAOKd,KAPL,CAOW,SAAAC,GAAG,CAAI,CACVrB,OAAO,CAACC,GAAR,CAAYoB,GAAZ,EACAzB,KAAK,CAACqC,QAAN,CAAepC,UAAU,CAAC,CAAEsC,WAAW,CAAE,YAAf,CAAD,CAAzB,EACH,CAVL,EAWH,CAtDmB,wDAAH,kBAARb,CAAAA,QAAQ,6CAAd,CAyDP,MAAO,IAAMc,CAAAA,kBAAkB,2FAAG,kBAAOC,KAAP,CAAcC,QAAd,6JACN5B,CAAAA,UAAU,CAC7B6B,MADmB,CACZ,CACJC,QAAQ,CAAEH,KADN,CAEJC,QAAQ,CAAEA,QAFN,CADY,EAKnBlB,KALmB,CAKb,SAAAC,GAAG,CAAI,CACV;AACArB,OAAO,CAACC,GAAR,CAAYoB,GAAZ,EACH,CARmB,EASnBH,IATmB,CASd,SAAAC,GAAG,CAAI,CACTnB,OAAO,CAACC,GAAR,CAAYkB,GAAZ,EACA,GAAIA,GAAG,CAACsB,MAAJ,GAAe,SAAnB,CAA8B,CAC1BnB,QAAQ,CAACH,GAAD,CAAR,CAGH,CACJ,CAhBmB,CADM,QAC1BuB,WAD0B,wEAAH,kBAAlBN,CAAAA,kBAAkB,kDAAxB","sourcesContent":["/**\r\n * File:        okta.js\r\n * \r\n * Description: \r\n */\r\nimport store from '../store/js/index';\r\nimport { setSession } from '../store/actions/index';\r\n// import OktaAuth from '@okta/okta-auth-js';\r\nlet OktaAuth = require('@okta/okta-auth-js');\r\n\r\n\r\n\r\nconsole.log(\"running auth client..\");\r\n//  Okta browser SDK AuthClient\r\nvar config = {\r\n    issuer: \"https://dev-236245.okta.com/oauth2/default\",\r\n    clientId: \"0oa4lqivbsKPbAtfs4x6\",\r\n    redirectUri: \"https://qumoc.com/foodcommune\",\r\n    responseMode: \"fragment\",\r\n    tokenManager: {\r\n        storage: \"sessionStorage\"\r\n    },\r\n    onSessionExpired: function () {\r\n        console.log(\"re-authorization is required\");\r\n        // authClient.getWithRedirect();\r\n    }\r\n};\r\n\r\n// AUTH CLIENT\r\nlet authClient = new OktaAuth(config);\r\n\r\n\r\nexport const session = async () => {\r\n    let options = {\r\n        method: \"POST\",\r\n        mode: \"same-origin\",\r\n        credentials: \"same-origin\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    fetch(\"/foodcommune/site/usersession\", options)\r\n        .then(res => {\r\n            console.log(res)\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n\r\n    return true;\r\n}\r\n\r\nexport const getToken = async (session) => {\r\n    console.log(\"GETTOKEN\")\r\n    // Check for user session\r\n    if (session) {\r\n\r\n        // Request token for API access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ entity: { login: session.user.profile.login, request: \"test\" } })\r\n        };\r\n\r\n        fetch(\"/foodcommune/secure\", options)\r\n            .then(res => {\r\n                if (res) return res.json();\r\n            })\r\n            .then(res => {\r\n                if (res.success) {\r\n                    store.dispatch(setSession({ token: res.token, user: res.user }));\r\n\r\n                    // Set secure cookies\r\n                    // document.cookie = `fc-user-auth = ${res.token};expires=`\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    } else {\r\n\r\n        // Get provisional site access\r\n        let options = {\r\n            method: \"POST\",\r\n            mode: \"same-origin\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({})\r\n        };\r\n        fetch(\"/foodcommune/secure/provisional\", options)\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(res => {\r\n                store.dispatch(setSession({ provisional: res.token }));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                store.dispatch(setSession({ provisional: \"test token\" }));\r\n            })\r\n    }\r\n};\r\n\r\nexport const signInAuthenticate = async (email, password) => {\r\n    let transaction = await authClient\r\n        .signIn({\r\n            username: email,\r\n            password: password\r\n        })\r\n        .catch(err => {\r\n            // this.setState({ errMsg: \"Email or password is incorrect!\" });\r\n            console.log(err);\r\n        })\r\n        .then(res => {\r\n            console.log(res);\r\n            if (res.status === 'SUCCESS') {\r\n                getToken(res);\r\n\r\n\r\n            }\r\n        })\r\n\r\n    // if (transaction && transaction.status === \"SUCCESS\") {\r\n    //   console.log(\"SUCCESS\", transaction);\r\n    //   authClient.session.setCookieAndRedirect(\r\n    //     transaction.sessionToken,\r\n    //     \"/foodcommune/dashboard\"\r\n    //   ); // Sets a cookie on redirect\r\n    // }\r\n}"]},"metadata":{},"sourceType":"module"}